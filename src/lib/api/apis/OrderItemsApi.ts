/* tslint:disable */
/* eslint-disable */
/**
 * Shop Project API
 * Just playing around with Django
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrderItem,
  PatchedOrderItem,
} from '../models/index';
import {
    OrderItemFromJSON,
    OrderItemToJSON,
    PatchedOrderItemFromJSON,
    PatchedOrderItemToJSON,
} from '../models/index';

export interface OrderItemsCreateRequest {
    orderItem: Omit<OrderItem, 'id'>;
}

export interface OrderItemsDestroyRequest {
    id: number;
}

export interface OrderItemsPartialUpdateRequest {
    id: number;
    patchedOrderItem?: Omit<PatchedOrderItem, 'id'>;
}

export interface OrderItemsRetrieveRequest {
    id: number;
}

export interface OrderItemsUpdateRequest {
    id: number;
    orderItem: Omit<OrderItem, 'id'>;
}

/**
 * 
 */
export class OrderItemsApi extends runtime.BaseAPI {

    /**
     */
    async orderItemsCreateRaw(requestParameters: OrderItemsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters['orderItem'] == null) {
            throw new runtime.RequiredError(
                'orderItem',
                'Required parameter "orderItem" was null or undefined when calling orderItemsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order-items/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemToJSON(requestParameters['orderItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     */
    async orderItemsCreate(requestParameters: OrderItemsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.orderItemsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderItemsDestroyRaw(requestParameters: OrderItemsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderItemsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order-items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async orderItemsDestroy(requestParameters: OrderItemsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderItemsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async orderItemsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrderItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order-items/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderItemFromJSON));
    }

    /**
     */
    async orderItemsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrderItem>> {
        const response = await this.orderItemsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async orderItemsPartialUpdateRaw(requestParameters: OrderItemsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderItemsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order-items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedOrderItemToJSON(requestParameters['patchedOrderItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     */
    async orderItemsPartialUpdate(requestParameters: OrderItemsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.orderItemsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderItemsRetrieveRaw(requestParameters: OrderItemsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderItemsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order-items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     */
    async orderItemsRetrieve(requestParameters: OrderItemsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.orderItemsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderItemsUpdateRaw(requestParameters: OrderItemsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderItemsUpdate().'
            );
        }

        if (requestParameters['orderItem'] == null) {
            throw new runtime.RequiredError(
                'orderItem',
                'Required parameter "orderItem" was null or undefined when calling orderItemsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/order-items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemToJSON(requestParameters['orderItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemFromJSON(jsonValue));
    }

    /**
     */
    async orderItemsUpdate(requestParameters: OrderItemsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItem> {
        const response = await this.orderItemsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
