/* tslint:disable */
/* eslint-disable */
/**
 * Shop Project API
 * Just playing around with Django
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GlobalCounter,
  PatchedGlobalCounter,
} from '../models/index';
import {
    GlobalCounterFromJSON,
    GlobalCounterToJSON,
    PatchedGlobalCounterFromJSON,
    PatchedGlobalCounterToJSON,
} from '../models/index';

export interface GlobalCountersCreateRequest {
    globalCounter?: Omit<GlobalCounter, 'id'|'count'|'last_updated'>;
}

export interface GlobalCountersDestroyRequest {
    id: number;
}

export interface GlobalCountersIncrementCreateRequest {
    id: number;
    globalCounter?: Omit<GlobalCounter, 'id'|'count'|'last_updated'>;
}

export interface GlobalCountersPartialUpdateRequest {
    id: number;
    patchedGlobalCounter?: Omit<PatchedGlobalCounter, 'id'|'count'|'last_updated'>;
}

export interface GlobalCountersRetrieveRequest {
    id: number;
}

export interface GlobalCountersUpdateRequest {
    id: number;
    globalCounter?: Omit<GlobalCounter, 'id'|'count'|'last_updated'>;
}

/**
 * 
 */
export class GlobalCountersApi extends runtime.BaseAPI {

    /**
     */
    async globalCountersCreateRaw(requestParameters: GlobalCountersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalCounter>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/global-counters/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalCounterToJSON(requestParameters['globalCounter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalCounterFromJSON(jsonValue));
    }

    /**
     */
    async globalCountersCreate(requestParameters: GlobalCountersCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalCounter> {
        const response = await this.globalCountersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async globalCountersDestroyRaw(requestParameters: GlobalCountersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling globalCountersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/global-counters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async globalCountersDestroy(requestParameters: GlobalCountersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.globalCountersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async globalCountersIncrementCreateRaw(requestParameters: GlobalCountersIncrementCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalCounter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling globalCountersIncrementCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/global-counters/{id}/increment/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalCounterToJSON(requestParameters['globalCounter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalCounterFromJSON(jsonValue));
    }

    /**
     */
    async globalCountersIncrementCreate(requestParameters: GlobalCountersIncrementCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalCounter> {
        const response = await this.globalCountersIncrementCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async globalCountersListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GlobalCounter>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/global-counters/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GlobalCounterFromJSON));
    }

    /**
     */
    async globalCountersList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GlobalCounter>> {
        const response = await this.globalCountersListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async globalCountersPartialUpdateRaw(requestParameters: GlobalCountersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalCounter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling globalCountersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/global-counters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedGlobalCounterToJSON(requestParameters['patchedGlobalCounter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalCounterFromJSON(jsonValue));
    }

    /**
     */
    async globalCountersPartialUpdate(requestParameters: GlobalCountersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalCounter> {
        const response = await this.globalCountersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async globalCountersRetrieveRaw(requestParameters: GlobalCountersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalCounter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling globalCountersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/global-counters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalCounterFromJSON(jsonValue));
    }

    /**
     */
    async globalCountersRetrieve(requestParameters: GlobalCountersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalCounter> {
        const response = await this.globalCountersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async globalCountersUpdateRaw(requestParameters: GlobalCountersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalCounter>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling globalCountersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/global-counters/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalCounterToJSON(requestParameters['globalCounter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalCounterFromJSON(jsonValue));
    }

    /**
     */
    async globalCountersUpdate(requestParameters: GlobalCountersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalCounter> {
        const response = await this.globalCountersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
