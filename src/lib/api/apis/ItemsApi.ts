/* tslint:disable */
/* eslint-disable */
/**
 * Shop Project API
 * Just playing around with Django
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Item,
  PatchedItem,
} from '../models/index';
import {
    ItemFromJSON,
    ItemToJSON,
    PatchedItemFromJSON,
    PatchedItemToJSON,
} from '../models/index';

export interface ItemsCreateRequest {
    item: Omit<Item, 'id'|'created_at'|'category'>;
}

export interface ItemsDestroyRequest {
    id: number;
}

export interface ItemsPartialUpdateRequest {
    id: number;
    patchedItem?: Omit<PatchedItem, 'id'|'created_at'|'category'>;
}

export interface ItemsRetrieveRequest {
    id: number;
}

export interface ItemsUpdateRequest {
    id: number;
    item: Omit<Item, 'id'|'created_at'|'category'>;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     */
    async itemsCreateRaw(requestParameters: ItemsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling itemsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/items/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async itemsCreate(requestParameters: ItemsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.itemsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemsDestroyRaw(requestParameters: ItemsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async itemsDestroy(requestParameters: ItemsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itemsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async itemsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Item>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/items/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     */
    async itemsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Item>> {
        const response = await this.itemsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async itemsPartialUpdateRaw(requestParameters: ItemsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedItemToJSON(requestParameters['patchedItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async itemsPartialUpdate(requestParameters: ItemsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.itemsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemsRetrieveRaw(requestParameters: ItemsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async itemsRetrieve(requestParameters: ItemsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.itemsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async itemsUpdateRaw(requestParameters: ItemsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemsUpdate().'
            );
        }

        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling itemsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/items/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemToJSON(requestParameters['item']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     */
    async itemsUpdate(requestParameters: ItemsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.itemsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
